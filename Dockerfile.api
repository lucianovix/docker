################  Build stage  ################
FROM node:18 AS builder

# Set working directory and increase heap size
WORKDIR /app/calcom
ENV NODE_OPTIONS="--max-old-space-size=4096"

# Build-time variables
ARG DATABASE_URL
ENV DATABASE_URL=$DATABASE_URL

# Copy the entire Cal.com source (submodule)
COPY calcom ./

# Enable corepack for Yarn
RUN corepack enable

# Install all dependencies
RUN yarn install --frozen-lockfile

# Alternative approach: Build everything that the API needs
# First, build all the dependencies
RUN yarn workspace @calcom/prisma build
RUN yarn workspace @calcom/lib build
RUN yarn workspace @calcom/features build
RUN yarn workspace @calcom/trpc build

# Now generate Prisma client with the correct working directory
WORKDIR /app/calcom/packages/prisma
RUN yarn prisma:generate

# Go back to root and build the API
WORKDIR /app/calcom
RUN yarn workspace @calcom/api-v2 build

################  Runtime stage  ################
FROM node:18-slim AS runner

# Install required dependencies for Prisma
RUN apt-get update -y && \
    apt-get install -y openssl ca-certificates && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Copy built application
COPY --from=builder /app/calcom/apps/api/v2/dist ./apps/api/v2/dist
COPY --from=builder /app/calcom/apps/api/v2/package.json ./apps/api/v2/package.json
COPY --from=builder /app/calcom/apps/api/v2/tsconfig.json ./apps/api/v2/tsconfig.json

# Copy all node_modules (includes generated Prisma client)
COPY --from=builder /app/calcom/node_modules ./node_modules

# Copy all packages (needed for runtime dependencies)
COPY --from=builder /app/calcom/packages ./packages

# Copy root package.json and yarn files
COPY --from=builder /app/calcom/package.json ./package.json
COPY --from=builder /app/calcom/.yarnrc.yml ./.yarnrc.yml
COPY --from=builder /app/calcom/.yarn ./.yarn

# Copy Prisma schema for potential runtime needs
COPY --from=builder /app/calcom/packages/prisma/schema.prisma ./packages/prisma/schema.prisma

# Set production environment
ENV NODE_ENV=production

# Expose port (Render will override with $PORT)
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --retries=5 \
  CMD wget -qO- http://localhost:${PORT:-3000}/api/v2/health || exit 1

# Start command - use $PORT from Render
CMD ["sh", "-c", "node apps/api/v2/dist/main.js"]
