################  Build stage  ################
FROM node:18 AS builder

# Set working directory and MAXIMIZE heap size for Render
WORKDIR /app/calcom
ENV NODE_OPTIONS="--max-old-space-size=8192"

# Build-time variables
ARG DATABASE_URL
ENV DATABASE_URL=$DATABASE_URL

# Copy the entire Cal.com source (submodule)
COPY calcom ./

# Enable corepack for Yarn
RUN corepack enable

# Install all dependencies
RUN yarn install --frozen-lockfile

# Build the API v2 and all its dependencies properly
# First, let's see what dependencies exist
RUN echo "=== Checking API v2 dependencies ===" && \
    cd apps/api/v2 && \
    cat package.json | grep -A 20 '"dependencies"' || true

# Build using turbo with proper scope
RUN npx turbo run build --scope=@calcom/api-v2 --include-dependencies --no-deps

# If that fails, try direct build
RUN cd apps/api/v2 && \
    (yarn build || npx nest build || npx tsc --project tsconfig.json)

# Generate Prisma client
WORKDIR /app/calcom/packages/prisma
RUN yarn prisma:generate || npx prisma generate

# Kopieer Swagger-documentatie
COPY calcom/apps/api/v2/swagger/documentation.json ./apps/api/v2/dist/apps/api/v2/swagger/documentation.json

# Return to root
WORKDIR /app/calcom

################  Runtime stage  ################
FROM node:18-slim AS runner

# Install required dependencies for Prisma
RUN apt-get update -y && \
    apt-get install -y openssl ca-certificates wget && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Copy EVERYTHING from the builder stage
# This ensures all dependencies are available
COPY --from=builder /app/calcom ./

# Set production environment
ENV NODE_ENV=production

# Expose port (Render will override with $PORT)
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --retries=5 \
  CMD wget -qO- http://localhost:${PORT:-3000}/api/v2/health || exit 1

# Start command with PORT environment variable
CMD ["sh", "-c", "PORT=${PORT:-3000} node apps/api/v2/dist/apps/api/v2/src/main.js"]
