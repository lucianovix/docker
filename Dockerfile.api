################  Build stage  ################
FROM node:18 AS builder

# Set working directory and increase heap size
WORKDIR /app/calcom
ENV NODE_OPTIONS="--max-old-space-size=4096"

# Build-time variables
ARG DATABASE_URL
ENV DATABASE_URL=$DATABASE_URL

# Copy the entire Cal.com source (submodule)
COPY calcom ./

# Enable corepack for Yarn
RUN corepack enable

# Install all dependencies
RUN yarn install --frozen-lockfile

# Use turbo to build ONLY what api-v2 needs
# This will automatically build all dependencies in the correct order
RUN npx turbo run build --filter=@calcom/api-v2...

# Generate Prisma client after build
# This ensures all TypeScript types are available
WORKDIR /app/calcom/packages/prisma
RUN yarn prisma:generate

# Return to root
WORKDIR /app/calcom

################  Runtime stage  ################
FROM node:18-slim AS runner

# Install required dependencies for Prisma
RUN apt-get update -y && \
    apt-get install -y openssl ca-certificates wget && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Copy the entire calcom directory (simpler approach)
# We'll optimize this later once it works
COPY --from=builder /app/calcom ./

# Set production environment
ENV NODE_ENV=production

# Expose port (Render will override with $PORT)
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --retries=5 \
  CMD wget -qO- http://localhost:${PORT:-3000}/api/v2/health || exit 1

# Start command - use the actual location of the built file
CMD ["sh", "-c", "node apps/api/v2/dist/apps/api/v2/src/main.js || node apps/api/v2/dist/main.js"]
