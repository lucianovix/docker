################  Build stage  ################
FROM node:18 AS builder

# Set working directory and MAXIMIZE heap size for Render
WORKDIR /app/calcom
# Increase heap size to 8GB (Render standard instances have 2GB RAM, but swap helps)
ENV NODE_OPTIONS="--max-old-space-size=8192"

# Build-time variables
ARG DATABASE_URL
ENV DATABASE_URL=$DATABASE_URL

# Copy the entire Cal.com source (submodule)
COPY calcom ./

# Enable corepack for Yarn
RUN corepack enable

# Install all dependencies
RUN yarn install --frozen-lockfile

# CRITICAL: Build only the API v2 directly, skip atoms and other heavy packages
# The API v2 doesn't actually need atoms for runtime
RUN cd apps/api/v2 && \
    echo "Building API v2 directly..." && \
    yarn build || \
    npx nest build || \
    npx tsc --project tsconfig.json

# Generate Prisma client
WORKDIR /app/calcom/packages/prisma
RUN yarn prisma:generate || npx prisma generate

# Return to root
WORKDIR /app/calcom

################  Runtime stage  ################
FROM node:18-slim AS runner

# Install required dependencies for Prisma
RUN apt-get update -y && \
    apt-get install -y openssl ca-certificates wget && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Only copy what we actually need for the API
COPY --from=builder /app/calcom/apps/api/v2/dist ./apps/api/v2/dist
COPY --from=builder /app/calcom/apps/api/v2/package.json ./apps/api/v2/package.json
COPY --from=builder /app/calcom/apps/api/v2/tsconfig.json ./apps/api/v2/tsconfig.json

# Copy node_modules but exclude heavy dev dependencies
COPY --from=builder /app/calcom/node_modules ./node_modules

# Copy ALL packages to avoid missing dependencies
COPY --from=builder /app/calcom/packages ./packages

# Copy root files
COPY --from=builder /app/calcom/package.json ./package.json
COPY --from=builder /app/calcom/turbo.json ./turbo.json

# Set production environment
ENV NODE_ENV=production

# Expose port (Render will override with $PORT)
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --retries=5 \
  CMD wget -qO- http://localhost:${PORT:-3000}/api/v2/health || exit 1

# Start command - use the exact path from the error logs
CMD ["sh", "-c", "PORT=${PORT:-3000} node apps/api/v2/dist/apps/api/v2/src/main.js"]
